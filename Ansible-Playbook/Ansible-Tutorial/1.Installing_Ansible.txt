# 1. Installing Ansible
#=============================================================================================#
sudo apt-get update
sudo apt-get install python3 python3-pip git libffi-dev libssl-dev -y
pip3 install ansible

ansible –-version
---
ansible 2.9.9
   config file = None
---

#=============================================================================================#
# 2. Ansible Support for SSH
#=============================================================================================#
sudo apt-get install openssh-server -y
ssh-keygen -t rsa
ls -l .ssh
---
#-rw——- 1 user user 1679 Jan 18 10:57 id_rsa
#-rw-r–r– 1 user user 398 Jan 18 10:57 id_rsa.pub
---
ssh-copy-id localhost
ssh localhost

#=============================================================================================#
# 3. Finally, Our First Ansible Command
#=============================================================================================#
ansible all -i "localhost," -m shell -a 'echo Ansible is fun'
---
#localhost | SUCCESS | rc=0 >>
#Ansible is fun
---

#=============================================================================================#
# 4. YAML Syntax
#=============================================================================================#
#1. Tip 1: Ansible-Playbook –Check Option
$ ansible-playbook -i inventory --check helloworld.yml
#2. Tip 2: Debug Day-to-Day Usage

.\helloworld_debug.yml
---
- name: message debug demo
  hosts: all
  tasks:
    - name: sample message
      ansible.builtin.debug:
        msg: "Sample Text"
        verbosity: 2
---

#3. privilege_escalation.yml#
#---------------------------------
---
- name: install httpd
  hosts: web.example.com
  become: true
  become_method: sudo
  become_user: root
  tasks:
    - name: install httpd
      ansible.builtin.yum:
        name: httpd
        status: present
---        
# The become_method specifies the escalation method. become_user specifies the destination user (default root).
# Some action needs to be taken by a user with administrative power. In Linux, it’s typically the root user. 
#   Some distributions allow for privilege escalation using the sudo command using the wheel group. 
#   The Ansible task will install the httpd Apache web server software so Ansible needs the root privilege to 
#   perform the task. This step is called “privilege escalation.” The yum module needs to perform some action on 
#   the managed node. In the Playbook, when it is not necessary, you can disable it.



#=============================================================================================#
# 4. Basic Ansible Playbooks
#=============================================================================================#
---                                      # first line of the playbook let us know it's a YAML file with the three dashes (---) 
 - hosts: localhost                      # tells us we are only deploying to our localhost
   tasks:                                # we then start a list of tasks which need to be run
     - name: Run our original Ansible command #
       debug: msg="Ansible is fun"
     - name: We also need to test connectivity
       ping:                            #  ping module to test connectivity.

ansible-playbook test.yml -i "localhost"


#=============================================================================================#
# 5. Ansible Configuration and Inventory Files
#=============================================================================================#
 ANSIBLE_ENVIRONMENT_VARIABLES – Usually specified in capital letters. Ansible will first look for variables 
  specified as environment variables and use them before any other variables.

The /etc/ansible/ansible.cfg – These are the system Ansible configurations created when the application is installed.

#Ansible looks for the configuration file in the following order:
--------------------------------------------------------------------
Priority 1: ANSIBLE_CONFIG (environment variable if set).
Priority 2: ansible.cfg (in the current directory).
Priority 3: ~/.ansible.cfg (in the home directory).
Priority 4: /etc/ansible/ansible.cfg (default location)

#The other parameters are-
#-------------------------
Inventory= /etc/ansible/hosts: We can specify the inventory file directly from the configuration file, 
Forks = 5: This represents the number of parallel connections that needs to be established. 
      By default, its value is 5. If we increase this value, the script processing time will be enhanced. 
sudo_user = root: Here we can change the sudo user to some other user with the admin rights, 
gathering = implicit: This option is used to collect more information about the host machine. 
timeout = 10: This is for the SSH timeout in seconds; for lab setup 10 seconds is OK, but for production, 
  you must change this to 30 seconds or even 60 seconds. 

Other modules in detail to
=============================
Command
This is default module, if you don't specifically mention any module, this module will be used. 
   It will work only when you have Python installed on manage nodes. The command module takes the command name 
   followed by a list of space-delimited arguments. These arguments are commands which will be executed on all the nodes.
   The command(s) will not be processed through the shell, 
   so variables like $HOME and operations like <, >, |,;, and & will not work.

 Parameters for command module
-----------------------------------
The following are the parameters for the command module:

argv: This parameter will allow us to pass the command as a list rather than a string. This parameter will allow us
     to add additional arguments. For example, if we need to change the directory before executing the command or 
      if we need to see whether the file already exists or not.
chdir: This parameter will allow us to change the directory before executing certain commands. If the command 
      is working in a certain folder only, we might have to change our directory first and then execute the command.
cmd: This parameter will specify the command or a list of commands, which will be executed on the manage nodes.
creates: This parameter will allow us to check file or global pattern. If it already exists then this step will not run.
removes: This parameter will check whether a file name or global pattern exists. If it already exists, this step will run.  

Example 1:
task:
- name: Execute Command in Linux
  command: whoami
  register: user_name

Example 2:
task:
- name: Execute Multiple Commands on Ansible Managed nodes
  command:
  argv:
  - pwd
  - whoami
  - ls -al

Example 3:
task:
- name: Execute DB Script
  command: /usr/bin/make_database.sh db_user db_name
  become: yes
  become_user: db_owner
  args:
  chdir: /var/projects/databases/
  creates: /var/projects/database/test_file

Shell
This will work only when you have Python installed on manage nodes. It is almost exactly like the command module but 
  runs the command through a shell (/bin/sh) on the remote node. Therefore, variables like $HOME and operations
  like <, >, |, ;, and & will work.

Example 1:
task:
- name: Redirect command output
  shell: cat /var/log/messages | grep "ram \| cpu" >>  health_log.txt

we are collecting the logs, which have ram or cpu mentioned in them and redirect the output in a text file.

Example 2:
task:
- name: Change Directory and Save logs
  shell: cat /var/log/messages | grep "ram \| cpu" >>  health_log.txt
  args:
  chdir: /project/logs/

we are changing the working directory before creating the log file

Example 3:
task:
- name: Search Log file
  shell:
  cmd: ls -l | grep log
  chdir: /var/projects/logs/
The only difference is that we are not creating a log file after changing the directory. We are actually trying to
   find the log files, as this would search all the files, which has log mentioned in their name.

executables
-------------
This is the only significant parameter change which I would like to mention here. This parameter will help us change 
  the shell that is used to execute the command. If we have a command or a script working only for a specific shell,
   then this parameter can help.

Example 4:
task:
   - name: Change the Linux SHELL
    shell: cat < /tmp/*txt
     args:
      executable: /bin/bash

RAW
This module is doing the same thing as Shell and command modules, but the key point is, it doesn't require Python 
  on the remote machine. This is useful and should only be done in a few cases. A common case is installing Python 
  on a system without Python installed by default. Another is managing any devices such as routers and switches that
  do not have any Python installed. Arguments given to RAW are run directly through the configured remote shell.


#Simple YAML Inventory
#--------------------------
./simple_yaml_inventory.yml
---
all:
  hosts:
    host1.example.com:
  children:
    frontends:
      hosts:
        host2.example.com:
        host3.example.com:
---
# host host1.example.com is ungrouped but host2.example.com and host3.example.com are grouped as frontends.

#Adding Ranges of Hosts
#--------------------------
./ini_range_inventory

[frontends]
www[01:99].example.com

[backends]
back-[a-f].example.com


#Hosting in Multiple Groups
#-------------------------------
./ini_groupsmultiple_inventory


host1.example.com

[frontends]
host2.example.com
host3.example.com

[prod]
host2.example.com

[dev]
host3.example.com


#Host Variables
#-------------------
./ini_hostinventory

[frontends]
localhost  ansible_connection=local
host1.example.com ansible_connection=ssh ansible_user=devops
host2.example.com ansible_connection=ssh ansible_user=ansible
host3.example.com ansible_user=example ansible_ssh_private_key_file=~/prj/id_rsa
host4.example.com ansible_host=10.0.113.111

#Group Variables
#--------------------
./groupsvariables_inventory_ini

[frontends]
host1.example.com
host2.example.com

[frontends:vars]
ntp_server=europe.pool.ntp.org

./groupsvariables_inventory_yaml.yml
---
frontends:
  hosts:
    host2.example.com:
    host3.example.com:
  vars:
    ntp_server: europe.pool.ntp.org
---


#Inheriting Variable Values
#----------------------------
#Hosts and groups can be combined.

./ini_variableinheriting_inventory

[asia]
host1.example.com

[europe]
host2.example.com

[frontends:children]
asia
europe

[frontends:vars]
ntp_server=europe.pool.ntp.org
./variableinheriting_inventory.yml
---
children:
  frontends:
    children:
      asia:
        hosts:
          host1.example.com:
      europe:
        hosts:
          host2.example.com:
    vars:
      ntp_server: europe.pool.ntp.org

---

Ref- 
https://docs.ansible.com/ansible/latest/installation_guide/intro_configuration.html#explanation-of-values-by-section

#=============================================================================================#
# 6. Running Ansible Modules
#=============================================================================================#
https://docs.ansible.com/ansible/latest/module_plugin_guide/index.html
https://docs.ansible.com/ansible/latest/collections/ansible/builtin/index.html

#Files modules
#----------------
copy: Copies files from a local file or directory to the managed host
fetch: Copies files from remote nodes to local files
file: Sets permissions and other properties of files
lineinfile: Adds or verifies that a particular line is or is not in a file configuration
synchronize: Synchronizes content using Rsync

#Software package modules
#-----------------------------
package: Manages packages using the autodetected package manager native to the operating system
yum: Manages packages using the YUM package manager
apt: Manages packages using the APT package manager
dnf: Manages packages using the DNF package manager
gem: Manages Ruby gems
pip: Manages Python packages from PyPI

#System modules
#---------------
firewalld: Manages arbitrary ports and services using firewalld
reboot: Reboots a machine
service: Manages services
user: Adds, removes, and manages user accounts

#Net tools modules
#-------------------
get_url: Downloads files in HTTP, HTTPS, and FTP
nmcli: Manages networking
uri: Interacts with web services



#=============================================================================================#
7. # Ping Module
#=============================================================================================#
# performs a ping test on the specified host requesting a reply if the host is accessible and powered on:
ansible -i hosts mylaptop -m ping
---
localhost | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}
---

#=============================================================================================#
# 8. Setup Module
#=============================================================================================#
# The setup module provides us with over 1000 lines of information on our system.
# This command is useful to gather data on your system and then perform specific changes dependent on the 
#   information gathered. For example, a specific application will be installed depending on the specific type of operating system architecture being used by the system:
ansible mylaptop -i hosts -m setup
---
localhost | SUCCESS => {
    "ansible_facts": {
        "ansible_apparmor": {
            "status": "disabled"
        },
        "ansible_architecture": "x86_64",
        "ansible_bios_date": "03/14/2014",
        "ansible_bios_version": "1.00",
        "ansible_cmdline": {
        …
        "ansible_userspace_architecture": "x86_64",
        "ansible_userspace_bits": "64",
        "ansible_virtualization_role": "guest",
        "ansible_virtualization_type": "docker",
        "discovered_interpreter_python": "/usr/bin/python3",
        "gather_subset": [
            "all"
        ],
        "module_setup": true
    },
    "changed": false
}
---

#=============================================================================================#
# 9. Git Module
#=============================================================================================#
# The git module allows you to perform Git commands via Ansible. If you need to deploy software directly from a 
#   git repository, this would be the perfect reason to use this module. You will need to have Git installed and 
#   available on your system before you are able to run the following command:
ansible mylaptop -i hosts -m git -a "repo='https://github.com/ucandoitrohit/Python3.git' dest=/tmp/py/"
---
localhost | CHANGED => {
    "after": "ecfb900a44a84dcd0d798ad3b0c98ea838ea5668",
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "before": null,
    "changed": true
}
---
#Exaplain-
# In this case, we have specified the repository with repo argument and then provided a destination folder 
#   with the dest argument. If the folder is not present, Ansible will create it, so we should see the file 
#    downloaded and available in our destination folder.

#=============================================================================================#
# 10. Shell Module
#=============================================================================================#
ansible mylaptop -i hosts -m shell -a "ls -l /tmp/"
---
localhost | CHANGED | rc=0 >>
total 8
drwx------ 2 root root 4096 Jun 24 14:35 ansible_command_
drwxr-xr-x 3 root root 4096 Jun 24 14:21 markdown-cheatsheet
---

#=============================================================================================#
# 11. Apt (or Yum)
#=============================================================================================#
ansible -i hosts mylaptop -m apt -a "name=apache2 state=present"

# present and absent

#=============================================================================================#
# 12. Service
#=============================================================================================#
ansible -i hosts mylaptop -m service -a "name=apache2 state=started"

# started, stopped, or restarted. 

#=============================================================================================#
# 13. get_url
#=============================================================================================#
# get_url module which grabs content from HTTP, HTTPS, or any other Internet protocols. 

ansible -i hosts mylaptop -m get_url -a "url=http://localhost dest=/tmp/"

# The output of our command shows a 200 value as a status_code to show we have a successful result from our command.

#=============================================================================================#
# 14. file
#=============================================================================================#
# To create a directory or file on an environment,

ansible mylaptop -i hosts -m file -a "path=/tmp/another_test owner=root group=root state=directory"

#=============================================================================================#
# 15. user
#=============================================================================================#
# Setting up users is easy with this user module. We can control the state of the account on the system as 
#    being absent or present to determine if it is created or removed:

ansible -i hosts mylaptop -m user -a "name=jsmith comment='Jane Smith' state=present"

#=============================================================================================#
# 16. find
#=============================================================================================#
# find module can be run to find different files and directories that are available on the host system. 
#    The find module allows you to specify a path, age of the file, and the type of file and even search 
#     for files of a specific size

ansible mylaptop -i hosts -m find -a "path=/var/log/ age=1w file_type=directory"

#=============================================================================================#
# 17. Running Ansible on Different Servers
#=============================================================================================#
ssh-copy-id <remote_host_ip>

# By performing the ssh-copy-id command, it will copy the public ssh key into the authorized_keys file located in 
#   the .ssh directory.

sudoers file
--------------
<username> ALL=(ALL) NOPASSWD: ALL

#=============================================================================================#
# 18. Command-Line Modules to Ansible Playbooks
#=============================================================================================#

ansible mylaptop -i hosts mylaptop -m apt -a "name=apache2 state=present"

ansible mylaptop -i hosts mylaptop -m file -a "path=/tmp/another_test owner=root group=root state=directory"

ansible mylaptop -i hosts mylaptop -m service -a "name=apache2 state=started"

#=============================================================================================#
# 19. Playbook example
#=============================================================================================#
---
- hosts: webserver
  tasks:
  - name: ensure apache is installed and up to date
    apt: name=apache2 state=latest
  - name: write the apache config file
    copy: src=000-default.conf dest=/etc/apache2/sites-available/000-default.conf
  notify:
  - restart apache2
  - name: apache is running (and enable it at boot)
    service: name=apache2 state=started enabled=yes
  handlers:
  - name: restart apache2
    service: name=apache2 state=restarted

#=============================================================================================#
# 19. Ansible Playbook Verbose Output -debug
#=============================================================================================#
Ansible logging

[defaults]
log_path= errorlogs


ansible-playbook -i hosts webserver-playbook.yml -v

# One -v argument adds the default debug output, while adding more values like -vv or -vvv or -vvvv 
#    will increase the amount of data being output and the detail of what is being run by Ansible. 
#    By expanding the output, we get to see the specific commands being run by the modules

# we add 1, 2, 3, 4, and 12 v arguments

for i in -v -vv -vvv -vvvv -vvvvvvvvvvvv;

  do ansible-playbook ​-i hosts  webserver-playbook.yml ${i} | wc -l ; 

done

#=============================================================================================#
# 19. Ansible Syntax in Finer Detail
#=============================================================================================#
# Hosts and Remote Users
---
- hosts: all  # or * ( asterisk  also we can use )
  order: sorted

# we are using all to include all of the hosts in the inventory file and the order of sorted, which deploys 
#   to the hosts in our inventory file in alphabetical order:


 ---
 - hosts: database
   remote_user: tom
   become: yes
   become_user: postgres

  # we are accessing the web server as user tom, but we then need to change to the postgres user, presumably to run database server tasks:

---
- hosts: database
  remote_user: tom
  become: yes
  become_method: su

#=============================================================================================#
# 19. Notify
#=============================================================================================#
- name: write the apache config file
  copy: src=000-default.conf dest=/etc/apache2/sites-available/000-default.conf
  notify:
  - restart apache
  handlers:
  - name: restart apache
    service: name=apache2 state=restarted

#=============================================================================================#
# 20. Adding More Playbook Functionality with Variables and Loops
#=============================================================================================#
# dbserver-playbook.yml
---
- hosts: mysql
  vars:
    mysql_root_password: password
  tasks:
  - name: install mysql and python-myslqdb
    apt: name={{ item }} update_cache=yes cache_valid_time=3600 state=present
    with_items:
    - python3-mysqldb
    - mysql-server
  - name: start up the mysql service
    shell: "service mysql start"
  - name: ensure mysql is enabled to run on startup
    service: name=mysql state=started enabled=true
  - name: update mysql root password for all root accounts
    mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_password }}"
    login_user: root
    login_password: "{{ mysql_root_password }}"
    check_implicit_admin: yes
    priv: "*.*:ALL,GRANT"
    with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost
  - name: create a new database
    mysql_db: name=testdb state=present login_user=root login_password="{{ mysql_root_password }}"
  - name: add sample data to database
    copy: src=dump.sql dest=/tmp/dump.sql
  - name: insert sample data into database
    mysql_db: name=testdb state=import target=/tmp/dump.sql login_user=root login_password="{{ mysql_root_password }}"


# Plugging In Our LAMP Stack
#=============================================================================================#
# webserver-playbook.yml
---
- hosts: webserver
  tasks:
  - name: ensure apache is installed and up to date
    apt: name=apache2 state=latest
  - name: write the apache config file
    copy: src=000-default.conf dest=/etc/apache2/sites-available/000-default.conf
    notify:
    - restart apache2
  - name: apache is running and enable it at boot
    service: name=apache2 state=started enabled=yes
  - name: disable pmp_event on apache
    shell: "a2dismod mpm_event"
    notify:
    - restart apache2
  - name: enable cgi on apache
    shell: "a2enmod mpm_prefork cgi"
    notify:
    - restart apache2
  - name: install pymysql module for index to use
    pip: name=pymysql executable=pip3
  - name: add in a test directory
    file: path=/var/www/test/ state=directory
  - name: add in your index file
    copy: src=index.py dest=/var/www/test/index.py  mode=755
    notify:
    - restart apache2
    handlers:
    - name: restart apache2
      service: name=apache2 state=restarted

# we can also create different file for handler like below
#=============================================================================================#
# apache_handlers.yml
---
- name: restart apache2
  service: name=apache2 state=restarted


#=============================================================================================#
# 21. Import 
#=============================================================================================#
# touch new-playbook.yml

---
- import_playbook: webserver-playbook.yml
- import_playbook: dbserver-playbook.yml
  handlers:
  - include_tasks: apache_handlers.yml
  # or
  - import_tasks: apache_handlers.yml

ansible-playbook -i hosts new-playbook.yml

#=============================================================================================#
# 21. Roles
#=============================================================================================#
# Out of the two ways that Ansible is able to reuse our configuration management tasks within playbooks, 
#   we have already discussed the first way by using import and include. The second way of reusing our tasks is
#   through roles. Both work in a similar way, but roles allow you a lot more flexibility

# Example- Creating the Web Server Role
# ------------------------------------------

mkdir roles
mkdir roles/web_server

1. Files – This includes all our supporting files. In our example, this might include configuration files.
2. Handlers – As we saw in our playbooks, we can set up handlers to perform specific tasks upon completion 
      of our playbook. This is the separate directory for the handlers.
3. Meta – This is for files to establish role dependencies or roles that need to be applied before your current 
      role can work correctly.
4. Templates – Instead of needing a separate file for all different web servers, you may be able to set up a 
      template to cover them all. We will be discussing templates later in the book.
5. Tasks – These are simply the tasks in our playbook to get our role to a specific state. Just as we created the 
      tasks in our playbooks earlier, we will separate our tasks and place them in their own directory.
6. Vars – These are variables which can be included as part of our tasks.
7. Defaults – These are default variables for our roles.


mkdir -p roles/web_server/{files,handlers,meta,templates,tasks,vars,defaults}

cp webserver-playbook.yml roles/web_server/tasks/main.yml

#Note:  remove the hosts details and notifiers section in the playbook
---
- name: ensure apache is installed and up to date
  apt: name=apache2 state=latest
- name: write the apache config file
  copy: src=000-default.conf dest=/etc/apache2/sites-available/000-default.conf
  notify:
  - restart apache2
- name: apache is running and enable it at boot
  service: name=apache2 state=started enabled=yes
- name: disable pmp_event on apache
  shell: "a2dismod mpm_event"
  notify:
  - restart apache2
- name: enable cgi on apache
  shell: "a2enmod mpm_prefork cgi"
  notify:
  - restart apache2
- name: install pymysql module for index to use
  pip: name=pymysql executable=pip3
- name: add in a test directory
  file: path=/var/www/test/ state=directory
- name: add in your index file
  copy: src=index.py dest=/var/www/test/index.py     mode=755
  notify:
  - restart apache2


cp 000-default.conf roles/web_server/files/
    <VirtualHost *:80>
         <Directory /var/www/test>
             Options +ExecCGI
             DirectoryIndex index.py
         </Directory>
         AddHandler cgi-script .py


cp index.py roles/web_server/files/

index.py
#!/usr/bin/python3
import pymysql
# Print necessary headers.
print("Content-Type: text/html")
print()
#Connect to the database.
conn = pymysql.connect(
             db='testdb',
             user='root',
             passwd='password',
             host='localhost')
c = conn.cursor()
# Print the contents of the table.
c.execute("SELECT * FROM test;")
for i in c:
  print(i)

touch roles/web_server/handlers/main.yml
---
- name: restart apache2
  service: name=apache2 state=restarted

touch site.yml
---
- hosts: webserver
  roles:
  - web_server


tree roles/web_server/
#--------------------------
roles/web_server/
|-- defaults
|-- files
|   |-- 000-default.conf
|   `-- index.py
|-- handlers
|   `-- main.yml
|-- meta
|-- tasks
|   `-- main.yml
|-- templates
`-- vars


#=============================================================================================#
# 21. Ansible Command-Line Variables and Options
#=============================================================================================#

# if you need to override any of the variables currently in place

--extra-vars variable=test
-e variable=test

-e "variable1=test1 variable2=test2"


https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable

#=============================================================================================#
# 21. Conditional Tasks in Ansible
#=============================================================================================#
---
- name: check if django app already exists
  shell: ls -l {{ django_app_location }} | grep -c web_app
  register: djangostatus
  failed_when: djangostatus.rc == 2


---
- name: create a directory for our django app
  file: path={{ django_app_location }}/web_app     mode=0755 owner=user group=user state=directory
  when: djangostatus.stdout == "0"
- name: create your new django app in the web_app directory
  shell: django-admin startproject web_app {{django_app_location }}web_app
  when: djangostatus.stdout == "0"
- name: configure your database to use work with django
  copy: src=settings.py dest={{ django_app_location}}/web_app/web_app/settings.py
  when: djangostatus.stdout == "0"
- name: apply a migration into the mysql database
  shell: python3 {{ django_app_location }}/web_app/manage.py migrate
  when: djangostatus.stdout == "0"
- name: create the admin superuser
  shell: python3 {{ django_app_location }}/web_app/manage.py createsuperuser --noinput ​--username=admin --email=admin@example.com
  when: djangostatus.stdout == "0"

#=============================================================================================#
# 21. Using Tags to Run Specific Tasks
#=============================================================================================#
---
- name: install django and make sure it is at the latest version
  apt: name=python3-django state=present
  tags: django_alive

ansible-playbook -i hosts site.yml -e django_app_location=`pwd` --list-tags

---
playbook: site.yml
  play #1 (webserver): webserver        TAGS: []
      TASK TAGS: [django_present]
---

#=============================================================================================#
# 21. Keeping Secret with Ansible Vault
#=============================================================================================#

ansible-vault encrypt roles/db_server/vars/test_environment.yml
---
New Vault password:
Confirm New Vault password:
Encryption successful
---

head -n5 roles/db_server/vars/test_environment.yml

ansible-vault view roles/db_server/vars/test_environment.yml

ansible-playbook -i hosts site.yml -e django_app_location=`pwd` -e env=test --ask-vault-pass

