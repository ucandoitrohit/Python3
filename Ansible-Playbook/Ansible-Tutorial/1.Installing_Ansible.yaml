# 1. Installing Ansible
#=============================================================================================#
sudo apt-get update
sudo apt-get install python3 python3-pip git libffi-dev libssl-dev -y
pip3 install ansible

ansible –-version
---
ansible 2.9.9
   config file = None
---

#=============================================================================================#
# 2. Ansible Support for SSH
#=============================================================================================#
sudo apt-get install openssh-server -y
ssh-keygen -t rsa
ls -l .ssh
---
#-rw——- 1 user user 1679 Jan 18 10:57 id_rsa
#-rw-r–r– 1 user user 398 Jan 18 10:57 id_rsa.pub
---
ssh-copy-id localhost
ssh localhost

#=============================================================================================#
# 3. Finally, Our First Ansible Command
#=============================================================================================#
ansible all -i "localhost," -m shell -a 'echo Ansible is fun'
---
#localhost | SUCCESS | rc=0 >>
#Ansible is fun
---

#=============================================================================================#
# 4. Basic Ansible Playbooks
#=============================================================================================#
---                                      # first line of the playbook let us know it's a YAML file with the three dashes (---) 
 - hosts: localhost                      # tells us we are only deploying to our localhost
   tasks:                                # we then start a list of tasks which need to be run
     - name: Run our original Ansible command #
       debug: msg="Ansible is fun"
     - name: We also need to test connectivity
       ping:                            #  ping module to test connectivity.

ansible-playbook test.yml -i "localhost"


#=============================================================================================#
# 5. Ansible Configuration and Inventory Files
#=============================================================================================#
 ANSIBLE_ENVIRONMENT_VARIABLES – Usually specified in capital letters. Ansible will first look for variables 
  specified as environment variables and use them before any other variables.

The /etc/ansible/ansible.cfg – These are the system Ansible configurations created when the application is installed.

Ref- 
https://docs.ansible.com/ansible/latest/installation_guide/intro_configuration.html#explanation-of-values-by-section

#=============================================================================================#
# 6. Running Ansible Modules
#=============================================================================================#
https://docs.ansible.com/ansible/latest/module_plugin_guide/index.html

#=============================================================================================#
7. # Ping Module
#=============================================================================================#
# performs a ping test on the specified host requesting a reply if the host is accessible and powered on:
ansible -i hosts mylaptop -m ping
---
localhost | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}
---

#=============================================================================================#
# 8. Setup Module
#=============================================================================================#
# The setup module provides us with over 1000 lines of information on our system.
# This command is useful to gather data on your system and then perform specific changes dependent on the 
#   information gathered. For example, a specific application will be installed depending on the specific type of operating system architecture being used by the system:
ansible mylaptop -i hosts -m setup
---
localhost | SUCCESS => {
    "ansible_facts": {
        "ansible_apparmor": {
            "status": "disabled"
        },
        "ansible_architecture": "x86_64",
        "ansible_bios_date": "03/14/2014",
        "ansible_bios_version": "1.00",
        "ansible_cmdline": {
        …
        "ansible_userspace_architecture": "x86_64",
        "ansible_userspace_bits": "64",
        "ansible_virtualization_role": "guest",
        "ansible_virtualization_type": "docker",
        "discovered_interpreter_python": "/usr/bin/python3",
        "gather_subset": [
            "all"
        ],
        "module_setup": true
    },
    "changed": false
}
---

#=============================================================================================#
# 9. Git Module
#=============================================================================================#
# The git module allows you to perform Git commands via Ansible. If you need to deploy software directly from a 
#   git repository, this would be the perfect reason to use this module. You will need to have Git installed and 
#   available on your system before you are able to run the following command:
ansible mylaptop -i hosts -m git -a "repo='https://github.com/ucandoitrohit/Python3.git' dest=/tmp/py/"
---
localhost | CHANGED => {
    "after": "ecfb900a44a84dcd0d798ad3b0c98ea838ea5668",
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "before": null,
    "changed": true
}
---
#Exaplain-
# In this case, we have specified the repository with repo argument and then provided a destination folder 
#   with the dest argument. If the folder is not present, Ansible will create it, so we should see the file 
#    downloaded and available in our destination folder.

#=============================================================================================#
# 10. Shell Module
#=============================================================================================#
ansible mylaptop -i hosts -m shell -a "ls -l /tmp/"
---
localhost | CHANGED | rc=0 >>
total 8
drwx------ 2 root root 4096 Jun 24 14:35 ansible_command_
drwxr-xr-x 3 root root 4096 Jun 24 14:21 markdown-cheatsheet
---

#=============================================================================================#
# 11. Apt (or Yum)
#=============================================================================================#
ansible -i hosts mylaptop -m apt -a "name=apache2 state=present"

# present and absent

#=============================================================================================#
# 12. Service
#=============================================================================================#
ansible -i hosts mylaptop -m service -a "name=apache2 state=started"

# started, stopped, or restarted. 

#=============================================================================================#
# 13. get_url
#=============================================================================================#
# get_url module which grabs content from HTTP, HTTPS, or any other Internet protocols. 

ansible -i hosts mylaptop -m get_url -a "url=http://localhost dest=/tmp/"

# The output of our command shows a 200 value as a status_code to show we have a successful result from our command.

#=============================================================================================#
# 14. file
#=============================================================================================#
# To create a directory or file on an environment,

ansible mylaptop -i hosts -m file -a "path=/tmp/another_test owner=root group=root state=directory"

#=============================================================================================#
# 15. user
#=============================================================================================#
# Setting up users is easy with this user module. We can control the state of the account on the system as 
#    being absent or present to determine if it is created or removed:

ansible -i hosts mylaptop -m user -a "name=jsmith comment='Jane Smith' state=present"

#=============================================================================================#
# 16. find
#=============================================================================================#
# find module can be run to find different files and directories that are available on the host system. 
#    The find module allows you to specify a path, age of the file, and the type of file and even search 
#     for files of a specific size

ansible mylaptop -i hosts -m find -a "path=/var/log/ age=1w file_type=directory"

#=============================================================================================#
# 17. Running Ansible on Different Servers
#=============================================================================================#
ssh-copy-id <remote_host_ip>

# By performing the ssh-copy-id command, it will copy the public ssh key into the authorized_keys file located in 
#   the .ssh directory.

sudoers file
--------------
<username> ALL=(ALL) NOPASSWD: ALL

#=============================================================================================#
# 18. Command-Line Modules to Ansible Playbooks
#=============================================================================================#

ansible mylaptop -i hosts mylaptop -m apt -a "name=apache2 state=present"

ansible mylaptop -i hosts mylaptop -m file -a "path=/tmp/another_test owner=root group=root state=directory"

ansible mylaptop -i hosts mylaptop -m service -a "name=apache2 state=started"

#=============================================================================================#
# 19. Playbook example
#=============================================================================================#
---
- hosts: webserver
  tasks:
  - name: ensure apache is installed and up to date
    apt: name=apache2 state=latest
  - name: write the apache config file
    copy: src=000-default.conf dest=/etc/apache2/sites-available/000-default.conf
  notify:
  - restart apache2
  - name: apache is running (and enable it at boot)
    service: name=apache2 state=started enabled=yes
  handlers:
  - name: restart apache2
    service: name=apache2 state=restarted

#=============================================================================================#
# 19. Ansible Playbook Verbose Output
#=============================================================================================#
ansible-playbook -i hosts webserver-playbook.yml -v

# One -v argument adds the default debug output, while adding more values like -vv or -vvv or -vvvv 
#    will increase the amount of data being output and the detail of what is being run by Ansible. 
#    By expanding the output, we get to see the specific commands being run by the modules

# we add 1, 2, 3, 4, and 12 v arguments

for i in -v -vv -vvv -vvvv -vvvvvvvvvvvv;

  do ansible-playbook ​-i hosts  webserver-playbook.yml ${i} | wc -l ; 

done

#=============================================================================================#
# 19. Ansible Syntax in Finer Detail
#=============================================================================================#
# Hosts and Remote Users
---
- hosts: all  # or * ( asterisk  also we can use )
  order: sorted

# we are using all to include all of the hosts in the inventory file and the order of sorted, which deploys 
#   to the hosts in our inventory file in alphabetical order:


 ---
 - hosts: database
   remote_user: tom
   become: yes
   become_user: postgres

  # we are accessing the web server as user tom, but we then need to change to the postgres user, presumably to run database server tasks:

---
- hosts: database
  remote_user: tom
  become: yes
  become_method: su

#=============================================================================================#
# 19. Notify
#=============================================================================================#
- name: write the apache config file
  copy: src=000-default.conf dest=/etc/apache2/sites-available/000-default.conf
  notify:
  - restart apache
  handlers:
  - name: restart apache
    service: name=apache2 state=restarted

#=============================================================================================#
# 20. Adding More Playbook Functionality with Variables and Loops
#=============================================================================================#
---
- hosts: mysql
  vars:
    mysql_root_password: password
  tasks:
  - name: install mysql and python-myslqdb
    apt: name={{ item }} update_cache=yes cache_valid_time=3600 state=present
    with_items:
    - python3-mysqldb
    - mysql-server
  - name: start up the mysql service
    shell: "service mysql start"
  - name: ensure mysql is enabled to run on startup
    service: name=mysql state=started enabled=true
  - name: update mysql root password for all root accounts
    mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_password }}"
    login_user: root
    login_password: "{{ mysql_root_password }}"
    check_implicit_admin: yes
    priv: "*.*:ALL,GRANT"
    with_items:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - localhost
  - name: create a new database
    mysql_db: name=testdb state=present login_user=root login_password="{{ mysql_root_password }}"










