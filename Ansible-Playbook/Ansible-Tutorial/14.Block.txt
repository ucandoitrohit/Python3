# Blocks

# Blocks are used to logically group tasks. Blocks are useful for error handling and when statements. 
#   One statement can be applied to the block, so that it affects all the tasks in the block. 
# Blocks allow a logical grouping of tasks and enable you to specify options such as when and become for 
#   multiple tasks instead of specifying them for each task, one at a time.
---
- name: Understand Blocks
  hosts: all
  tasks:
  - name: Installing Apache
    block:
    - package:
      name: "{{item}}"
      state: installed
    with_items:
     - httpd
     - elinks
     - mod_ssl
  - service:
      name: httpd
      state: started
      enable: true
    when: ansible_distribution == 'CentOS'

# Blocks allow error handling; if a task fails, the task in the rescue task can be executed for recovery. 
#  We also have an always task, which will run regardless of success or failure of the task defined in blocks or rescue.
---
- name: Error handling in Blocks
  hosts: all
  tasks:
  - block:
    - name: Upgrading Database
       shell:
       cmd: /opt/db_scripts/upgrade-database
    rescue:
    - name: Revert If Upgrade failure happens
      shell:
      cmd: /opt/db_scripts/revert-database
    always:
    - name: Restart the database
      service:
       name: mariadb
       state: restarted

# Ansible block option will upgrade the database. If upgrade script executed properly, 
#   the rescue block will be ignored and the always block will be executed.

# In case upgrade script failed, the rescue block will be executed, which will revert all the database changes; 
#  once it's done, the always block will restart the database. So, either block or rescue will be executed at any time,
#   but the always block will execute in any case.



If you have a playbook that requires some tasks to be run with elevated privileges and others that need to run as a normal user, you can use block to split the tasks
example, the following playbook installs and configures apache2 as root before copying a configuration file into the home directory of the default user:

---
- hosts: all
  tasks:
    - block:
        - apt: name=apache2 state=installed
        - template: name=vhost.conf dest=/etc/apache2/sites-enabled/vhost.conf
      become: true

    - copy: name=s3.cfg dest=~/.s3.cfg


---
- hosts: all
  tasks:
    - block:
        - command: /bin/false
        - debug: msg="I will never run as the task above fails"
      rescue:
        - debug: msg="This will run because the block failed"
      always:
        - debug: msg="This runs no matter what happens"

        
            